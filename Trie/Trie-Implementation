

source : https://leetcode.com/problems/implement-trie-prefix-tree/
**********************************************************************************************************************************************************************
A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:

Trie() Initializes the trie object.
void insert(String word) Inserts the string word into the trie.
boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.

***********************************************************************************************************************************************************************

https://leetcode.com/problems/implement-trie-prefix-tree/


class TrieNode {
    
	boolean isWord;
	TrieNode[] children = new TrieNode[26];
	TrieNode() {}
	
}
class Trie {

    /** Initialize your data structure here. */
    TrieNode root;
    public Trie() {
    	this.root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode tempNode = root;
    	for(int i=0;i<word.length();i++) {
    		char ch = word.charAt(i);
    		if(tempNode.children[ch-'a'] == null) {
    			tempNode.children[ch-'a'] = new TrieNode();
    		}
    		tempNode = tempNode.children[ch-'a'];
    	}
    	tempNode.isWord=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode tempNode = root;
    	for(int i=0;i<word.length();i++) {
    		char ch = word.charAt(i);
    		if(tempNode.children[ch-'a'] == null) {
    			return false;
    		}
    		tempNode = tempNode.children[ch-'a'];
    	}
    	return tempNode.isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode tempNode = root;
    	for(int i=0;i<prefix.length();i++) {
    		char ch = prefix.charAt(i);
    		if(tempNode.children[ch-'a'] == null) {
    			return false;
    		}
    		tempNode = tempNode.children[ch-'a'];
    	}
    	return true;
    }
}

Complexity Analysis

Insert 

Time :  O(m), where m is the key length.
Space : O(m) - In the worst case newly inserted key doesn't share a prefix with the the keys already inserted in the trie. We have to add m new nodes, which takes us O(m)Ospace.

Search : 

Time : O(m)
Space : O1)

Startswith:
 
TTime : O(m)
Space : O1)
