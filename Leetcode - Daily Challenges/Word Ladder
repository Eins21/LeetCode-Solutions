
source : https://leetcode.com/problems/word-ladder/

*************************************************************************************************************************************************************************************************
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.
*************************************************************************************************************************************************************************************************

Approach 1 - BFS:

public int ladderLength(String beginWord, String endWord, List<String> wordList) {

		HashSet<String> set = new HashSet<>();
		for (String word : wordList) {
			set.add(word);
		}
		Queue<String> queue = new LinkedList<>();
		queue.add(beginWord);

		int ladderLength = 0;
		while (!queue.isEmpty()) {
			int queueSize = queue.size();
			for (int i = 0; i < queueSize; i++) {
				String currentWord = queue.poll();
				if (currentWord.equals(endWord)) {
					return ladderLength + 1;
				}
				set.remove(currentWord);

				char[] currentWordCharArr = currentWord.toCharArray();
				for (int j = 0; j < currentWordCharArr.length; j++) {
					char charToBeReplaced = currentWordCharArr[j];
					for (int k = 0; k < 26; k++) {
						currentWordCharArr[j] = (char) ('a' + k);
						String modifiedCurrentWord = new String(currentWordCharArr);
						if (set.contains(modifiedCurrentWord) && charToBeReplaced != currentWordCharArr[j])
							queue.add(modifiedCurrentWord);
					}
					currentWordCharArr[j] = charToBeReplaced;
				}

			}
			ladderLength++;
		}

		return 0;
	}
  
  Time :
  Space : 
  
 Approach 2 - Bidirectional BFS: 
