
source : https://leetcode.com/problems/group-anagrams/
******************************************************************************************************************************************************
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

*******************************************************************************************************************************************************

Approach 1:

public List<List<String>> groupAnagrams(String[] strs) {
  if (strs == null || strs.length == 0) return new ArrayList<>();
  HashMap<String, List<String>> map = new HashMap<String, List<String>>();
  for (String str : strs) {
    char[] keyArr = new String(str).toCharArray();
    Arrays.sort(keyArr);
    String key = String.valueOf(keyArr);
    if (!map.containsKey(key)) map.put(key, new ArrayList<String>());
    map.get(key).add(str);
  }
  return new ArrayList<>(map.values());
}

Time : O(NKlogK) where N is the length of strs, and K is the maximum length of a string in strs. The outer loop has complexity O(N) as we iterate through each string. 
Then, we sort each string in O(KlogK) time.
Space : O(NK) the total information content stored. 

Approach 2:

public List<List<String>> groupAnagrams(String[] strs) {
      if (strs == null || strs.length == 0) return new ArrayList<>();
      Map<String, List<String>> map = new HashMap<>();
      for (String s : strs) {
          char[] ca = new char[26];
          for (char c : s.toCharArray()) ca[c - 'a']++;
          String keyStr = String.valueOf(ca);
          if (!map.containsKey(keyStr)) map.put(keyStr, new ArrayList<>());
          map.get(keyStr).add(s);
      }
      return new ArrayList<>(map.values());
}

Time : O(NK)
Space : O(NK) the total information content stored
  
  
