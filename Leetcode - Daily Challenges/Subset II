
source : https://leetcode.com/problems/subsets-ii/
*************************************************************************************************************************
Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

*************************************************************************************************************************
Iterative:

public List<List<Integer>> subsets(int[] nums) {
  Arrays.sort(nums);
  List<List<Integer>> result = new ArrayList<List<Integer>>();
  result.add(new ArrayList<Integer>());
  int begin = 0;
  for (int i = 0; i < nums.length; i++) {
    if (i == 0 || nums[i] != nums[i - 1])
      begin = 0;
    int size = result.size();
    for (int j = 0; j < size; j++) {
      List<Integer> cur = new ArrayList<Integer>(result.get(j));
      cur.add(nums[i]);
      result.add(cur);
    }
    begin = size;
  }
  return result;
}
		
Time: O(2^N * N)- 2N(genrate all subsets), N(copy the subset to result list)
Space: O(2^N)		

Backtracking:

public List<List<Integer>> subsets(int[] nums) {
  List<List<Integer>> list = new ArrayList<>();
  Arrays.sort(nums);
  backtrack(list, new ArrayList<>(), nums, 0);
  return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] nums, int start) {
  list.add(new ArrayList<>(tempList));
  for (int i = start; i < nums.length; i++) {
    if (i == start || nums[i] != nums[i - 1]) {
      tempList.add(nums[i]);
      backtrack(list, tempList, nums, i + 1);
      tempList.remove(tempList.size() - 1);
    }
  }
} 

Time: O(2^N * N)- 2N(genrate all subsets), N(copy the subset to result list)
Space: O(2^N)

Bit Masking:

public List<List<Integer>> subsets(int[] nums) {
  List<List<Integer>> output = new ArrayList();
  int n = nums.length;

  for (int i = (int) Math.pow(2, n); i < (int) Math.pow(2, n + 1); ++i) {
    String bitmask = Integer.toBinaryString(i).substring(1);
    List<Integer> curr = new ArrayList();
    for (int j = 0; j < n; ++j) {
      if (bitmask.charAt(j) == '1')
        curr.add(nums[j]);
    }
    if (!output.contains(curr))
      output.add(curr);
  }
  return output;
}

Time: O(2^N * N) - 2N(genrate all subsets), N(copy the subset to result list)
Space: O(2^N)
