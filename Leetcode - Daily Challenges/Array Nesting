
source : https://leetcode.com/problems/array-nesting/
************************************************************************************************************************

You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].

You should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:

The first element in s[k] starts with the selection of the element nums[k] of index = k.
The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.
We stop adding right before a duplicate element occurs in s[k].
Return the longest length of a set s[k].

************************************************************************************************************************

Approach 1 :

public int arrayNesting(int[] nums) {
    boolean[] visited = new boolean[nums.length];
    int res = 0;
    for (int i = 0; i < nums.length; i++) {
        if (!visited[i]) {
            int start = nums[i], count = 0;
            do {
                start = nums[start];
                count++;
                visited[start] = true;
            }
            while (start != nums[i]);
            res = Math.max(res, count);
        }
    }
    return res;
}

Time : O(N)
Space : O(N)

Approach 2 :

public int arrayNesting(int[] nums) {
    int res = 0;
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] != Integer.MAX_VALUE) {
            int start = nums[i], count = 0;
            while (nums[start] != Integer.MAX_VALUE) {
                int temp = start;
                start = nums[start];
                count++;
                nums[temp] = Integer.MAX_VALUE;
            }
            res = Math.max(res, count);
        }
    }
    return res;
}

Time : O(N)
Space : O(1)


