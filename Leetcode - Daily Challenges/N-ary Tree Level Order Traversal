
source : https://leetcode.com/problems/n-ary-tree-level-order-traversal/
****************************************************************************************************
Given an n-ary tree, return the level order traversal of its nodes' values.

****************************************************************************************************

BFS

public List<List<Integer>> levelOrder(Node root) {
	List<List<Integer>> result = new ArrayList<List<Integer>>();
	return levelOrderUtil(root, result);
}

List<List<Integer>> levelOrderUtil(Node root, List<List<Integer>> result) {
	if (root == null)
		return result;
	Queue<Node> queue = new LinkedList<>();
	queue.add(root);

	while (!queue.isEmpty()) {

		List<Integer> tempResult = new ArrayList<Integer>();
		int size = queue.size();
		for (int i = 0; i < size; i++) {
			Node tempNode = queue.poll();
			tempResult.add(tempNode.val);
			for (int j = 0; j < tempNode.children.size(); j++) {
				queue.add(tempNode.children.get(j));
			}
		}
		result.add(tempResult);
	}
	return result;
}

Complexity

Time: O(N), where N is number of nodes in the tree.
Extra Space (without counting output as space): O(N), this is the memory to store elements in the queue. At most, the queue will have 2 layers of the tree on it at any given time.
In the best case, each level has only 1 node.
In the worst case, for example in balanced tree, there is about N/2 nodes in the lowest level.

DFS

public List<List<Integer>> levelOrder(Node root) {
	List<List<Integer>> result = new ArrayList<List<Integer>>();
	levelOrderUtil(root,result,0);
	return result;
}

void levelOrderUtil(Node root,List<List<Integer>> result,int level){
	if(root == null) return;
	if(result.size() == level) result.add(new ArrayList<>());
	result.get(level).add(root.val);
	for(Node node : root.children) levelOrderUtil(node,result,level+1);

}

Complexity

Time: O(N), where N is number of nodes in the tree.
Extra Space (without counting output as space): O(H), where H is height of the tree. This is the memory for recursion stack.
In the best case, it's a balanced tree, the height is logN.
In the worst case, each level has only 1 node, the height is H.
