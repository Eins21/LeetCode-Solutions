Subset I
Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.


BitMasking:

public List<List<Integer>> subsets(int[] nums) {
  List<List<Integer>> output = new ArrayList();
  int n = nums.length;

  for (int i = (int) Math.pow(2, n); i < (int) Math.pow(2, n + 1); ++i) {
    String bitmask = Integer.toBinaryString(i).substring(1);

    List<Integer> curr = new ArrayList();
    for (int j = 0; j < n; ++j) {
      if (bitmask.charAt(j) == '1')
        curr.add(nums[j]);
    }
    if (!output.contains(curr))
      output.add(curr);
  }
  return output;
}

Time: O(2^N * N), where N <= 10 is length of nums array.
Space: O(2^N)

Iterative:

public List<List<Integer>> subsets(int[] nums) {
  List<List<Integer>> output = new ArrayList();
  output.add(new ArrayList<Integer>());

  for (int num : nums) {
    List<List<Integer>> newSubsets = new ArrayList();
    for (List<Integer> curr : output) {
      newSubsets.add(new ArrayList<Integer>(curr) {{add(num);}});
    }
    for (List<Integer> curr : newSubsets) {
      output.add(curr);
    }
  }
  return output;
}

Time: O(2^N * N), where N <= 10 is length of nums array.
Space: O(2^N)

Backtracking:

 public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
  }

  private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
  }
  
Time: O(2^N * N), where N <= 10 is length of nums array.
Space: O(2^N)

Subset II

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

BitMasking:

public List<List<Integer>> subsetsWithDup(int[] nums) {
  List<List<Integer>> output = new ArrayList();
  int n = nums.length;

  Arrays.sort(nums);
  for (int i = (int) Math.pow(2, n); i < (int) Math.pow(2, n + 1); ++i) {
    String bitmask = Integer.toBinaryString(i).substring(1);
    List<Integer> curr = new ArrayList();
    for (int j = 0; j < n; ++j) {
      if (bitmask.charAt(j) == '1')
        curr.add(nums[j]);
    }
    if (!output.contains(curr))
      output.add(curr);
  }
  return output;
} 

Time: O(2^N * N), where N <= 10 is length of nums array.
Space: O(2^N)

Iterative:

public List<List<Integer>> subsetsWithDup(int[] nums) {
      List<List<Integer>> output = new ArrayList();
      output.add(new ArrayList<Integer>());

     Arrays.sort(nums);
     for (int num : nums) {
       List<List<Integer>> newSubsets = new ArrayList();
       for (List<Integer> curr : output) {
         newSubsets.add(new ArrayList<Integer>(curr){{add(num);}});
       }
       for (List<Integer> curr : newSubsets) {
         if(!output.contains(curr))  
           output.add(curr);
       }
     }
     return output;
 } 

Time: O(2^N * N), where N <= 10 is length of nums array.
Space: O(2^N)

Backtracking:

public List<List<Integer>> subsetsWithDup(int[] nums) {
      List<List<Integer>> list = new ArrayList<>();
  Arrays.sort(nums);
  backtrack(list, new ArrayList<>(), nums, 0);
  return list;
 }

 private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
  list.add(new ArrayList<>(tempList));
  for(int i = start; i < nums.length; i++){
      if(i> start && nums[i] == nums[i-1]) continue;
      tempList.add(nums[i]);
      backtrack(list, tempList, nums, i + 1);
      tempList.remove(tempList.size() - 1);
  }
} 

Time: O(2^N * N), where N <= 10 is length of nums array.
Space: O(2^N)
