 Combination Sum I 
 
source : https://leetcode.com/problems/combination-sum/

********************************************************************************************************************************************
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the 
chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of
the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

**********************************************************************************************************************************************

class Solution {
    public List<List<Integer>> combinationSum(int[] nums, int target) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(list, new ArrayList<>(), nums, target, 0);
        return list;
   }

   private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int remain, int start){
      if(remain < 0) return;
      else if(remain == 0) list.add(new ArrayList<>(tempList));
      else{
        for(int i = start; i < nums.length; i++){
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, remain - nums[i], i);
            tempList.remove(tempList.size() - 1); 
        }
     }
  } 
}

Time : O(2^n)
Space : O(n)

 Combination Sum II
 
 ********************************************************************************************************************************************
 Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the 
 candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

**********************************************************************************************************************************************

class Solution {
  public List<List<Integer>> combinationSum2(int[] nums, int target) {
      List<List<Integer>> list = new ArrayList<>();
      Arrays.sort(nums);
      backtrack(list, new ArrayList<>(), nums, target, 0);
      return list;
 }

 private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int remain, int start){
    if(remain < 0) return;
    else if(remain == 0) list.add(new ArrayList<>(tempList));
    else{
      for(int i = start; i < nums.length; i++){
          if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates
          tempList.add(nums[i]);
          backtrack(list, tempList, nums, remain - nums[i], i + 1);
          tempList.remove(tempList.size() - 1); 
      }
   }
} 
}
