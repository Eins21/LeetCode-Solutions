
source : https://leetcode.com/problems/decode-ways/

******************************************************************************************************************************

A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping
above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.

****************************************************************************************************************************

Recursion :

public int numDecodings(String s) {

	return numDecodingsUtil(s, 0);
}

int numDecodingsUtil(String s, int i) {

	if (s.length() == i)
		return 1;

	if (s.charAt(i) == '0')
		return 0;

	int result = numDecodingsUtil(s, i + 1);

	if (i + 1 < s.length() && (s.charAt(i) == '1' || s.charAt(i) == '2' && s.charAt(i + 1) <= '6'))
		result += numDecodingsUtil(s, i + 2);

	return result;

}

Time : O(2^n)
Space : O(n)

Memoization:

public int numDecodings(String s) {

	return numDecodingsUtil(s, 0, new Integer[s.length()]);
}

int numDecodingsUtil(String s, int i, Integer[] memo) {

	if (s.length() == i)
		return 1;

	if (s.charAt(i) == '0')
		return 0;

	if (memo[i] != null)
		return memo[i];

	int result = numDecodingsUtil(s, i + 1, memo);

	if (i + 1 < s.length() && (s.charAt(i) == '1' || s.charAt(i) == '2' && s.charAt(i + 1) <= '6'))
		result += numDecodingsUtil(s, i + 2, memo);

	return memo[i] = result;

}

Time : O(n)
Space : O(n)

Iterative:

public int numDecodings(String s) {

	int n = s.length();
	int[] memo = new int[s.length() + 1];

	memo[n] = 1;
	for (int i = n - 1; i >= 0; i--) {
		if (s.charAt(i) != '0') {
			memo[i] = memo[i + 1];
			if (i < n - 1 && (s.charAt(i) == '1' || s.charAt(i) == '2' && s.charAt(i + 1) <= '6'))
				memo[i] += memo[i + 2];
		}

	}
	return memo[0];
}

Time : O(n)
Space : O(n)

Iterative : Space optimized

public int numDecodings(String s) {

	int dp1 = 1, dp2 = 0, n = s.length();
	for (int i = n - 1; i >= 0; i--) {
		int dp = s.charAt(i) == '0' ? 0 : dp1;
		if (i < n - 1 && (s.charAt(i) == '1' || s.charAt(i) == '2' && s.charAt(i + 1) < '7'))
			dp += dp2;
		dp2 = dp1;
		dp1 = dp;
	}
	return dp1;
}

Time : O(n)
Space : O(1)
