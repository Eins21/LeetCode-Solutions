
source : https://leetcode.com/problems/ugly-number-ii/

***************************************************************************************
An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

***************************************************************************************


Recursion - TLE:

public int nthUglyNumber(int n) {

  int count = 1, i = 2;
  while (count < n) {
    if (isUglyUtil(i))
      count++;
    i++;
  }
  return i - 1;
}

boolean isUglyUtil(int num) {

  if (num == 0)
    return false;
  if (num == 1)
    return true;

  if (num % 2 == 0)
    return isUglyUtil(num / 2);
  else if (num % 3 == 0)
    return isUglyUtil(num / 3);
  else if (num % 5 == 0)
    return isUglyUtil(num / 5);
  else
    return false;
}

Time : exponential
Space : Recursion stack space

Memoization - TLE:

public int nthUglyNumber(int n) {

  HashMap<Integer, Boolean> memo = new HashMap<Integer, Boolean>();
  int count = 1, i = 2;
  while (count < n) {
    if (isUglyUtil(i, memo))
      count++;
    i++;
  }
  return i - 1;
}

boolean isUglyUtil(int num, HashMap<Integer, Boolean> memo) {

  if (num == 0)
    return false;
  if (num == 1)
    return true;

  if (memo.containsKey(num))
    return memo.get(num);

  boolean result = false;
  if (num % 2 == 0)
    result = isUglyUtil(num / 2, memo);
  else if (num % 3 == 0)
    result = isUglyUtil(num / 3, memo);
  else if (num % 5 == 0)
    result = isUglyUtil(num / 5, memo);

  memo.put(num, result);
  return memo.get(num);
}

Time : O(NlogN)
Space : O(N)

Iterative - DP:

public int nthUglyNumber(int n) {

  int[] nums = new int[n];
  int index2 = 0, index3 = 0, index5 = 0;
  nums[0] = 1;
  for (int i = 1; i < nums.length; i++) {
    nums[i] = Math.min(nums[index2] * 2, Math.min(nums[index3] * 3, nums[index5] * 5));
    if (nums[i] == nums[index2] * 2)
      index2++;
    if (nums[i] == nums[index3] * 3)
      index3++;
    if (nums[i] == nums[index5] * 5)
      index5++;
  }
  return nums[n - 1];
}

Time : O(N)
Space : O(N)

TreeSet:

public int nthUglyNumber(int n) {

  TreeSet<Long> ans = new TreeSet<>();
  ans.add(1L);
  for (int i = 0; i < n - 1; ++i) {
    long first = ans.pollFirst();
    ans.add(first * 2);
    ans.add(first * 3);
    ans.add(first * 5);
  }
  return ans.first().intValue();
}

Time : O(NlogN)
Space : O(N)
