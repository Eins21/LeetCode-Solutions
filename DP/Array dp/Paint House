
source : https://www.lintcode.com/problem/515/description

********************************************************************************************************************************
Description
There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. 
The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent 
houses have the same color, and you need to cost the least. Return the minimum cost.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. 
For example, costs[0][0] is the cost of painting house 0 with color red; 
costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses

********************************************************************************************************************************

Bruteforce - 1:

int minCost =  Integer.MAX_VALUE; 
public int minCost(int[][] costs) {

    return minCostUtil(costs, 0,-1,0);
}

int minCostUtil(int[][] costs, int i,int prevIndex,int currentCost) {

  if (i == costs.length)
    return currentCost;
  for (int j = 0; j < 3; j++) {
    if(j != prevIndex)
    minCost = Math.min(minCostUtil(costs, i + 1,j,currentCost + costs[i][j]), minCost);
  }
  return minCost;
}

Time : O(2^n)
Space : Recursion stack space

Bruteforce -2:
public int minCost(int[][] costs) {
    return Math.min(minCost(0,0,costs), Math.min(minCost(0,1,costs),minCost(0,2,costs)));     
}
private int minCost(int p, int c, int[][] costs) {
    if(p==costs.length) return 0;
    int mc=Integer.MAX_VALUE;
    for(int i=0;i<3;i++) if(i!=c)  mc=Math.min(mc,minCost(p+1,i,costs));
    return costs[p][c]+mc;
}

Time : O(2^N)
Space : Recursion stack space


Memoization:

public int minCost(int[][] costs) {
    int h=costs.length;
    if(h==0) return 0;
    int[][] mem=new int[h][costs[0].length];
    return Math.min(minCost(0,0,costs,mem), Math.min(minCost(0,1,costs,mem),minCost(0,2,costs,mem)));     
}
private int minCost(int p, int c, int[][] costs, int[][] mem) {
    if(p==costs.length) return 0;
    if(mem[p][c]!=0) return mem[p][c];
    int mc=Integer.MAX_VALUE;
    for(int i=0;i<3;i++) if(i!=c)  mc=Math.min(mc,minCost(p+1,i,costs,mem));
    return mem[p][c]=costs[p][c]+mc;
}

Time : O(N)
Space : O(N*3)

Iterative DP:

public int minCost(int[][] costs) {

    if (costs.length==0) return 0;

    int n = costs.length;

    int[][] dp = new int[n][3];

    dp[0][0] = costs[0][0];
    dp[0][1] = costs[0][1];
    dp[0][2] = costs[0][2];

    for (int i=1; i<n; i++) {
        dp[i][0] = Math.min(dp[i-1][1], dp[i-1][2]) + costs[i][0];
        dp[i][1] = Math.min(dp[i-1][0], dp[i-1][2]) + costs[i][1];
        dp[i][2] = Math.min(dp[i-1][0], dp[i-1][1]) + costs[i][2];
    }

    return Math.min(dp[n-1][0], Math.min(dp[n-1][1], dp[n-1][2]));
}

Time : O(N)
Space : O(N*3)
