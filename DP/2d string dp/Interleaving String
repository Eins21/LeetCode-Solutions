
source : https://leetcode.com/problems/interleaving-string/

**********************************************************************************************************************
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

************************************************************************************************************************

Recursive :

public boolean isInterleave(String s1, String s2, String s3) {

  return isInterleaveUtil(s1, s2, s3, 0, 0, 0);
}

boolean isInterleaveUtil(String s1, String s2, String s3, int i, int j, int k) {

  if (k == s3.length() && i == s1.length() && j == s2.length())
    return true;

  if (k == s3.length())
    return false;

  boolean result = false;
  if (i < s1.length() && s1.charAt(i) == s3.charAt(k)) {
    result |= isInterleaveUtil(s1, s2, s3, i + 1, j, k + 1);
  }
  if (j < s2.length() && s2.charAt(j) == s3.charAt(k)) {
    result |= isInterleaveUtil(s1, s2, s3, i, j + 1, k + 1);
  }
  return result;
}

Time : O(2^s1.length()+s2.length())
Space : Recursion stack space

Memoization

boolean isInterleaveUtil(String s1, String s2, String s3, int i, int j, int k, Boolean[][] memo) {

  if (k == s3.length() && i == s1.length() && j == s2.length())
    return true;

  if (k == s3.length())
    return false;

  if (memo[i][j] != null)
    return memo[i][j];

  boolean result = false;

  if (i < s1.length() && s1.charAt(i) == s3.charAt(k)) {
    result |= isInterleaveUtil(s1, s2, s3, i + 1, j, k + 1, memo);
  }
  if (j < s2.length() && s2.charAt(j) == s3.charAt(k)) {
    result |= isInterleaveUtil(s1, s2, s3, i, j + 1, k + 1, memo);
  }
  return memo[i][j] = result;
}

Time : O(s1.length()*s2.length())
Space : O(s1.length()*s2.length())

Iterative

public boolean isInterleave(String s1, String s2, String s3) {

  if ((s1.length() + s2.length()) != s3.length())
    return false;

  Boolean[][] memo = new Boolean[s1.length() + 1][s2.length() + 1];

  memo[0][0] = true;

  for (int i = 1; i < memo.length; i++) {
    memo[i][0] = memo[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);
  }
  for (int j = 1; j < memo[0].length; j++) {

    memo[0][j] = memo[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);
  }

  for (int i = 1; i < memo.length; i++) {
    for (int j = 1; j < memo[0].length; j++) {
      memo[i][j] = (memo[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1))
          || (memo[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
    }

  }
  return memo[s1.length()][s2.length()];
}

Time : O(s1.length()*s2.length())
Space : O(s1.length()*s2.length())
