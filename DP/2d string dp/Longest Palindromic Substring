

source : https://leetcode.com/problems/longest-palindromic-substring/

*******************************************************************************************
Given a string s, return the longest palindromic substring in s.

*******************************************************************************************

Brute force:

public String longestPalindrome(String s) {
  String result = "";
  int len = Integer.MIN_VALUE;
  for (int i = 0; i < s.length(); i++) {
    for (int j = i; j < s.length(); j++) {
      if (isPalindromic(i, j, s)) {
        if (len < j - i + 1)
          result = s.substring(i, j + 1);
        len = Math.max(len, j - i + 1);
      }
    }
  }
  return result;
}

boolean isPalindromic(int i, int j, String s) {
  if (i >= j)
    return true;
  return s.charAt(i) == s.charAt(j) && isPalindromic(i + 1, j - 1, s);
}

Time : O(N^3)
Space : O(N)

public String longestPalindrome(String s) {

  String result = "";
  int len = Integer.MIN_VALUE;
  int size = s.length();
  Boolean[][] memo = new Boolean[size][size];

  for (int i = size - 1; i >= 0; i--) {
    for (int j = i; j < size; j++) {
      if (isPalindromic(i, j, s, memo)) {
        if (len < j - i + 1)
          result = s.substring(i, j + 1);
        len = Math.max(len, j - i + 1);
      }
    }
  }
  return result;
}


boolean isPalindromic(int i, int j, String s, Boolean[][] memo) {
  if (i >= j)
    return true;
  if (memo[i][j] != null)
    return memo[i][j];
  return memo[i][j] = s.charAt(i) == s.charAt(j) && isPalindromic(i + 1, j - 1, s, memo);
}

Time : O(N^2)
Space : O(N^2)

public String longestPalindrome(String s) {

  String result = "";
  int len = Integer.MIN_VALUE;
  int size = s.length();
  Boolean[][] memo = new Boolean[size][size];

  for (int i = 0; i < size; i++) memo[i][i] = true;

  for (int i = size - 1; i >= 0; i--) {
    for (int j = i; j < size; j++) {
      memo[i][j] = s.charAt(i) == s.charAt(j) && ((j - i + 1) < 3 || memo[i + 1][j - 1]);
      if (memo[i][j] && len < j - i + 1) {
        len = Math.max(len, j - i + 1);
        result = s.substring(i, j + 1);
      }
    }
  }
  return result;
}

Time : O(N^2)
Space : O(N^2)
