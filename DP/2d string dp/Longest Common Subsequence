

source : https://leetcode.com/problems/longest-common-subsequence/
****************************************************************************************************************************************
Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing 
the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

******************************************************************************************************************************************


Recursive:

public int longestCommonSubsequence(String text1, String text2) {
    return longestCommonSubsequenceUtil(text1,text2,0,0,0);
}

int longestCommonSubsequenceUtil(String text1, String text2,int i,int j,int len){

if(text1.length() == i || text2.length() == j)
   return len;
if(text1.charAt(i) == text2.charAt(j))
  return  longestCommonSubsequenceUtil(text1,text2,i+1,j+1,len+1);
else
  return       Math.max(longestCommonSubsequenceUtil(text1,text2,i+1,j,len),longestCommonSubsequenceUtil(text1,text2,i,j+1,len)); 
}

Time : O

Top Down:

public int longestCommonSubsequence(String text1, String text2) {
    Integer[][] dp = new Integer[text1.length()][text2.length()];
    return longestCommonSubsequenceUtil(text1,text2,0,0,dp);
}

int longestCommonSubsequenceUtil(String text1, String text2,int i,int j, Integer[][] dp){

    if(text1.length() == i || text2.length() == j)
      return 0;
    if(dp[i][j] != null)
        return dp[i][j];
    if(text1.charAt(i) == text2.charAt(j))
      dp[i][j] = longestCommonSubsequenceUtil(text1,text2,i+1,j+1,dp)+1;
    else    
     dp[i][j] = Math.max(longestCommonSubsequenceUtil(text1,text2,i+1,j,dp),longestCommonSubsequenceUtil(text1,text2,i,j+1,dp)); 

    return dp[i][j];

}

Time : O(M*N)
Space : O(M*N)

Bottom Up:

public int longestCommonSubsequence(String text1, String text2) {
    return longestCommonSubsequenceUtil(text1,text2);
}
int longestCommonSubsequenceUtil(String text1, String text2){

    int[][] dp = new int[text1.length()+1][text2.length()+1];  

    for(int i=1;i<=text1.length();i++){
        for(int j=1;j<=text2.length();j++){
           dp[i][j] = text1.charAt(i-1) == text2.charAt(j-1) ? dp[i-1][j-1]+1 : Math.max(dp[i-1][j],dp[i][j-1]);    
        }
    }    
    return  dp[text1.length()][text2.length()];                 
}

Time : O(M*N)
Space : O(M*N)
