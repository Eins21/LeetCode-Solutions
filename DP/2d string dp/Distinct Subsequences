
source : https://leetcode.com/problems/distinct-subsequences/

************************************************************************************************************************
Given two strings s and t, return the number of distinct subsequences of s which equals t.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the 
characters without disturbing the remaining characters' relative positions.
(i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

It is guaranteed the answer fits on a 32-bit signed integer.

************************************************************************************************************************

Brute force:

int findsubsequences(String s,String t,int i,int j)
{
  if (t.length() == j) return 1;
  if (s.length() == i) return 0;

  int subsequences = findsubsequences(s, t, i + 1, j);
  if (s.charAt(i) == t.charAt(j)) subsequences += findsubsequences(s, t, i + 1, j + 1);

  return subsequences;

}

Time : O(2^(max(s, t)))
Space : O(max(s, t))

where s,t are the length of the two input strings

Memoization:

int findsubsequences(String s,String t,int i,int j,Integer[][] memo)
{
  if (t.length() == j) return 1;
  if (s.length() == i) return 0;

  if (memo[i][j] != null) return memo[i][j];

  memo[i][j] = findsubsequences(s, t, i + 1, j, memo);

  if (s.charAt(i) == t.charAt(j)) memo[i][j] += findsubsequences(s, t, i + 1, j + 1, memo);
  return memo[i][j];

}

Time : O(s * t)
Space : O(max(s, t)) + O(s * t) = O(s * t)
- O(max(s, t)), recursive call stack memory
- O(s * t), memo

where s,t are the length of the two input strings

Iterative:

public int numDistinct(String s, String t) {

  Integer[][] memo = new Integer[s.length() + 1][t.length() + 1];

  memo[0][0] = 1;
  for (int i = 1; i <= s.length(); i++) memo[i][0] = 1;
  for (int j = 1; j <= t.length(); j++) memo[0][j] = 0;

  for (int i = 1; i <= s.length(); i++) {
    for (int j = 1; j <= t.length(); j++) {
      memo[i][j] = memo[i - 1][j];
      if (s.charAt(i - 1) == t.charAt(j - 1)) {
        memo[i][j] += memo[i - 1][j - 1];
      }
    }
  }
  return memo[s.length()][t.length()];
}

Time : O(s * t)
Space : O(s * t)
where s,t are the length of the two input strings
