
Jump Game I
source : https://leetcode.com/problems/jump-game/


Recursion (TLE):

 public boolean canJump(int[] nums) {
        
	return canJumpUtil(nums,0);
}

boolean canJumpUtil(int[] nums,int index){

	if(index >= nums.length-1) return true;

	for(int i=1;i<=nums[index];i++){

		if(canJumpUtil(nums,index+i)) return true;
	}

   return false;
} 

Top Down + memo:

public boolean canJump(int[] nums) {
        
	Boolean[] dp = new Boolean[nums.length];
	return canJumpUtil(nums,0,dp);
}

boolean canJumpUtil(int[] nums,int index,Boolean[] dp){

	if(index >= nums.length-1) 
		return true;

	if(dp[index] != null) 
		return dp[index];

	for(int i=1;i<=nums[index];i++){

		if(canJumpUtil(nums,index+i,dp)) 
			return true;
	}

   return dp[index] = false;
} 

Time : O(N^2)
Space : O(N)
	
Bottom Up
	
 public boolean canJump(int[] nums) {

   if(nums.length == 1) return true;

   Boolean[] dp = new Boolean[nums.length];

	int indexToBeReached = nums.length-1;
	boolean indexReached = false;

	for(int i=nums.length-2;i>=0;i--){

		for(int j=1;j<=nums[i];j++){

			if(i+j >= indexToBeReached || (dp[i+j] !=null && dp[i+j])){ 
				dp[i]=true;
				indexToBeReached = i;
				indexReached = true;
				break;
			}   
		}

		if(!indexReached) dp[i]=false;

	}

   return dp[0]!=null?dp[0]:false;
}

Time : O(N^2)
Space : O(1)
	
Greedy
	
public boolean canJump(int[] nums) {
	int max = 0;
	for(int i=0;i<nums.length;i++){
		if(i>max) {return false;}
		max = Math.max(nums[i]+i,max);
	}
	return true;
}
Time : O(N)
Space : O(1)


Jump Game II
source : https://leetcode.com/problems/jump-game-ii/

 public int jump(int[] nums) {
       
   return jump(0,nums);        
 }
private int jump(int p, int[] nums) {
	int n = nums.length;
	if(p>=n-1)
	    return 0;
	if(p+nums[p]>=n-1)
	    return 1;
	int max=0, steps=0;
	for(int i=1;i<=nums[p];i++) {
	    int jump2 = i+nums[p+i];
	    if(jump2>max) {
		max = jump2;
		steps = i;
	    }   
}
  return 1+jump(p+steps, nums);
}

Time: O(N)
Space O(N)
