

source : https://practice.geeksforgeeks.org/problems/fractional-knapsack-1587115620/1#
********************************************************************************************************************************************
Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

*********************************************************************************************************************************************

Solution :

 double fractionalKnapsack(int W, Item arr[], int n) 
{

    Arrays.sort(arr,(a,b) -> (b.value/b.weight) -  (a.value/a.weight));
    double totalCost = 0;

    for(Item item : arr){

        if(W >= item.weight){
            W -= item.weight;
            totalCost += item.value;
        } else {
            totalCost +=  item.value*(double)W/(double)item.weight;
            W -= (double)W/(double)item.weight*item.weight;
            break;
        }

    }

    return totalCost;
}

Time : O(sort)
Space : O(sort)
