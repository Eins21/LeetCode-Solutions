


Left View - Recursive:

List<Integer> leftViewRecursive(Node root) {
  return leftViewUtil(root, new ArrayList<Integer>(), 0);
}

List<Integer> leftViewUtil(Node root, ArrayList<Integer> result, int level) {
  if (root == null)
    return result;
  if (result.size() == level)
    result.add(root.data);
  leftViewUtil(root.left, result, level + 1);
  leftViewUtil(root.right, result, level + 1);
  return result;
}

Left View - Iterative:

List<Integer> leftViewIterative(Node root) {
  return leftViewUtil(root, new ArrayList<Integer>());
}

List<Integer> leftViewUtil(Node root, ArrayList<Integer> result) {
  if (root == null)
    return result;
  Queue<Node> queue = new LinkedList<>();
  queue.offer(root);
  while (!queue.isEmpty()) {
    int size = queue.size();
    for (int i = 0; i < size; i++) {
      Node tempNode = queue.poll();
      if (tempNode.left != null)
        queue.offer(tempNode.left);
      if (tempNode.right != null)
        queue.offer(tempNode.right);
      if (i == 0)
        result.add(tempNode.data);
    }
  }
  return result;
}

Right View - Recursive:

public List<Integer> rightSideViewRecursive(TreeNode root) {
  return rightSideViewUtil(root, new ArrayList<Integer>(), 0);
}

ArrayList<Integer> rightSideViewUtil(TreeNode root, ArrayList<Integer> result, int level) {
  if (root == null)
    return result;
  if (result.size() == level)
    result.add(root.val);
  rightSideViewUtil(root.right, result, level + 1);
  rightSideViewUtil(root.left, result, level + 1);
  return result;
}

Right View - Iterative:

public List<Integer> rightSideViewIterative(TreeNode root) {
  return rightSideViewUtil(root, new ArrayList<Integer>());
}

ArrayList<Integer> rightSideViewUtil(TreeNode root, ArrayList<Integer> result) {
  if (root == null)
    return result;
  Queue<TreeNode> queue = new LinkedList<>();
  queue.offer(root);
  while (!queue.isEmpty()) {
    int size = queue.size();
    for (int i = 0; i < size; i++) {
      TreeNode tempNode = queue.poll();
      if (tempNode.left != null)
        queue.offer(tempNode.left);
      if (tempNode.right != null)
        queue.offer(tempNode.right);
      if (i == (size - 1))
        result.add(tempNode.val);
    }
  }
  return result;
}

TopView - Recursive:

class Pair
{
  int nodeData;
  int height;

  Pair(int key, int num) {
    nodeData = key;
    height = num;
  }
}
void topViewDFS(Node root)
{
  if (root == null) return;
  TreeMap<Integer, Pair> map = new TreeMap<>();
  inorder(root, 0, 0, map);
} 

void inorder(Node root,int w,int h, TreeMap <Integer,Pair> map)
{
  if (root == null)
    return;
  inorder(root.left, w - 1, h + 1, map);
  if (!map.containsKey(w)) map.put(w, new Pair(root.data, h));

  else if (map.get(w).height > h) map.put(w, new Pair(root.data, h));

  inorder(root.right, w + 1, h + 1, map);
} 

TopView - Iterative:
class Pair
{
    Node node;
    int horizontalDist;

    Pair(Node node,int horizontalDist)
    {
        this.node = node;
        this.horizontalDist = horizontalDist;
    }
}
  void topViewBFS(Node root)
  {
  if (root == null)
    return;
  TreeMap<Integer, Integer> map = new TreeMap<>();
  Queue<Pair> queue = new LinkedList<>();

  queue.add(new Pair(root, 0));
  while (!queue.isEmpty()) {
    Pair pair = queue.peek();
    queue.poll();

    Node curr = pair.node;
    int horizontalLevel = pair.horizontalDist;
    if (!map.containsKey(horizontalLevel)) map.put(horizontalLevel, curr.data);

    if (curr.left != null) queue.add(new Pair(curr.left, horizontalLevel - 1));

    if (curr.right != null) queue.add(new Pair(curr.right, horizontalLevel + 1));
  }
  }

BottomView - Recursive:

public ArrayList<Integer> bottomViewDFS(Node root) {
  TreeMap<Integer, ArrayList<Pair>> map = new TreeMap<>();

  new SolutionClass().inorder(root, 0, 0, map);
  ArrayList<Integer> result = new ArrayList<Integer>();

  for (List<Pair> list : map.values()) {

    for (Pair pair : list)
      result.add(pair.nodeData);
  }

  return result;

}

void inorder(Node root, int w, int h, TreeMap<Integer, ArrayList<Pair>> map) {
  if (root == null)
    return;
  inorder(root.left, w - 1, h + 1, map);
  if (!map.containsKey(w) || map.get(w).get(0).height < h) {
    ArrayList<Pair> list = new ArrayList<Pair>();
    list.add(new Pair(root.data, h));
    map.put(w, list);
  }

  else if (map.get(w).get(0).height == h) {
    ArrayList<Pair> list = map.get(w);
    list.add(new Pair(root.data, h));
    map.put(w, list);
  }

  inorder(root.right, w + 1, h + 1, map);
}
