

source : https://leetcode.com/problems/binary-tree-maximum-path-sum/
********************************************************************************************************************************************
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. 
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any path.

********************************************************************************************************************************************

class Solution {  
  int max_sum;
  public int maxPathSum(TreeNode root) {
      max_sum = Integer.MIN_VALUE;
      maxPathSumUtil(root);
      return max_sum;
  }

  int maxPathSumUtil(TreeNode root){
      if(root == null)
          return 0;
      int leftSum = Math.max(maxPathSumUtil(root.left),0);
      int rightSum = Math.max(maxPathSumUtil(root.right),0);
      max_sum = Math.max(max_sum,leftSum+rightSum+root.val);
      return root.val + Math.max(leftSum,rightSum);

  }
}

Time : O(N)
Space : O(N)



Maximum Path Sum between 2 Leaf Nodes 
source : https://practice.geeksforgeeks.org/problems/maximum-path-sum/1#

class Solution
{
  int max_sum;
  int maxPathSum(Node root)
  { 
      max_sum = Integer.MIN_VALUE;
      maxPathSumUtil(root);
      return max_sum;
  } 

  int maxPathSumUtil(Node root){
      if(root == null) return 0;

      if(root.left == null && root.right == null) return root.data;

      int leftSum = maxPathSumUtil(root.left);
      int rightSum = maxPathSumUtil(root.right);

      if(root.left != null && root.right != null){
          max_sum = Math.max(max_sum,leftSum+rightSum+root.data);
          return root.data+ Math.max(leftSum,rightSum);
      }
      return root.left == null ? root.data + rightSum : root.data + leftSum;

  }
}

Time : O(N)
Space : O(N)
