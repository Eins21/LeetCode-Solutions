
source : https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
******************************************************************************************************************************
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: 
“The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants
(where we allow a node to be a descendant of itself).”
******************************************************************************************************************************

Binary Tree:

Recursive:

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if(root == null) return null;
    if(root == p || root == q) return root;
    TreeNode left = lowestCommonAncestor(root.left,p,q);
    TreeNode right = lowestCommonAncestor(root.right,p,q);

    if(left != null && right !=null) return root;
    if(left == null && right ==null) return null;
    return left != null ? left : right;
}
Time : O(N)
Space : O(N)

Iterative - By parent nodes:

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
     Map<TreeNode, TreeNode> parent = new HashMap<>();
    Deque<TreeNode> stack = new ArrayDeque<>();
    parent.put(root, null);
    stack.push(root);

    while (!parent.containsKey(p) || !parent.containsKey(q)) {
        TreeNode node = stack.pop();
        if (node.left != null) {
            parent.put(node.left, node);
            stack.push(node.left);
        }
        if (node.right != null) {
            parent.put(node.right, node);
            stack.push(node.right);
        }
    }
    Set<TreeNode> ancestors = new HashSet<>();
    while (p != null) {
        ancestors.add(p);
        p = parent.get(p);
    }
    while (!ancestors.contains(q))
        q = parent.get(q);
    return q;
}

Time : O(N)
Space : O(N)

DFS solution:
These paths can be stored in lists. Since we need lowest common ancestor, we can check from the front for the last such node which is common in both the lists.

Time : O(N)
Space : O(N) - Lists to store paths can lead to O(N)

Binary Search Tree:

Recursive:

 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if(root.val > Math.max(p.val,q.val))
       return lowestCommonAncestor(root.left,p,q); 
    else if(root.val < Math.min(p.val,q.val))
       return lowestCommonAncestor(root.right,p,q); 
    else
        return root;
}

Time: O(H), where H is the heigh of Binary Tree.
Space: O(H)

Iterative:

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    int small = Math.min(p.val, q.val);
    int large = Math.max(p.val, q.val);
    while (root != null) {
        if (root.val > large) 
            root = root.left;
        else if (root.val < small)
            root = root.right;
        else
            return root;
    }
    return null;
}

Time: O(H), where H is the heigh of Binary Tree.
Space: O(1)
