
********************************************************************************************************************************************
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

*********************************************************************************************************************************************

Backtracking Approach:

class Solution {
    
  public List<List<String>> partition(String s) {

      List<List<String>> result = new ArrayList<>();
      boolean[][] dp = new 
      partitionUtil(result,0,s,new ArrayList<>());
      return result;
  }

  void partitionUtil(List<List<String>> result,int start,String s, List<String> tempList){

      if(start == s.length()){
          result.add(new ArrayList<>(tempList));
          return;
      }
      for(int end=start;end<s.length();end++){

          if(isPalindrome(s,start,end)){
              tempList.add(s.substring(start,end+1));
              partitionUtil(result,end+1,s,tempList);
              tempList.remove(tempList.size()-1);
          }    

      }
  }

  boolean isPalindrome(String s,int start,int end){
      while(start < end)
          if(s.charAt(start++) != s.charAt(end--)) return false;
      return true;
  }

}

Time : O(n*2^n)
Space : O(n)

DP approach:
