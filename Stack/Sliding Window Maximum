
source : https://leetcode.com/problems/sliding-window-maximum/
***********************************************************************************************************************************************
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.

**********************************************************************************************************************************************


Approach 1 - Priority Queue :

public int[] maxSlidingWindow(int[] nums, int k) {
    PriorityQueue<Integer> priorityQueue = new PriorityQueue<>((x, y) -> Integer.compare(nums[y], nums[x]));
    for (int i = 0; i < k; i++) {
      priorityQueue.offer(i);
    }
    int[] maxWindowArr = new int[nums.length - k + 1];
    maxWindowArr[0] = nums[priorityQueue.peek()];
    for (int i = 0; i + k < nums.length; i++) {
      priorityQueue.remove(i);
      priorityQueue.offer(k + i);
      maxWindowArr[i + 1] = nums[priorityQueue.peek()];
    }
    return maxWindowArr;
}

Time : O(nk)      - since priorityQueue.remove() function in java will take o(n) time
       O(nlog(k)) - If we implement priority queue 
Space : O(nums.length - k + 1)

Approach 1 - Deque :

public int[] maxSlidingWindow(int[] nums, int k) {
    Deque<Integer> deque = new ArrayDeque<>();
    int[] maxSubArr = new int[nums.length - k + 1];
    int count = 0;
    for (int i = 0; i < nums.length; i++) {
      while (deque.size() > 0 && deque.peekFirst() < i - k + 1) {
        deque.pollFirst();
      }
      while (deque.size() > 0 && nums[deque.peekLast()] <= nums[i]) {
        deque.pollLast();
      }
      deque.offer(i);
      if (i >= k - 1)
        maxSubArr[count++] = nums[deque.peekFirst()];
    }
    return maxSubArr;
}

Time : O(n)
Space : O(nums.length - k + 1)
