
*********************************
Implement Queue using two stacks

*********************************

class MyQueue {

	/** Initialize your data structure here. */
	Stack<Integer> s1 = null;
	Stack<Integer> s2 = null;
	int front = -1;

	public MyQueue() {
		s1 = new Stack<Integer>();
		s2 = new Stack<Integer>();
	}

	/** Push element x to the back of queue. */
	public void push(int x) {
		if (s1.empty())
			front = x;
		s1.push(x);
	}

	/** Removes the element from in front of queue and returns that element. */
	public int pop() {
		if (s2.isEmpty()) {
			while (!s1.isEmpty())
				s2.push(s1.pop());
		}
		return s2.pop();
	}

	/** Get the front element. */
	public int peek() {
		if (!s2.isEmpty()) {
			return s2.peek();
		}
		return front;
	}

	/** Returns whether the queue is empty. */
	public boolean isEmpty() {
		return s1.isEmpty() && s2.isEmpty();
	}
}

Time : Push - O(1), Pop - Amortized O(1), Peek - O(1), isEmpty - O(1)
Space : O(n)
